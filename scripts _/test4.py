# This script was generated by SVP 4 Manager.
# Check https://www.svp-team.com for more details.

import vapoursynth as vs
core = vs.core
core.num_threads = 8

if not hasattr(core,'svp2'):
    core.std.LoadPlugin("C:\\Program Files (x86)\\SVP 4\\plugins64\\svpflow2_vs.dll")
if not hasattr(core,'trt'):
    core.std.LoadPlugin("C:\\Program Files (x86)\\SVP 4\\rife\\vstrt.dll")
import sys
sys.path.append("C:\\Program Files (x86)\\SVP 4\\rife")
from vsmlrt import RIFE, RIFEModel, Backend
from durfix import FixFrameDurations


clip = video_in.std.Trim(length=5000000)

smoothfps_params = "{rate:{num:1}}"

src_fps     = container_fps if container_fps>0.1 else 23.976
demo_mode   = 0
stereo_type = 0
nvof = 0
rife = 1
rife_num = 2
rife_den = 1
rife_trt = 1
rife_sc = 0.15
rife_fmt = vs.RGBH
rife_mnum = 46
trt_backend = Backend.TRT(fp16=True,device_id=0,num_streams=2,output_format=1,use_cuda_graph=True,workspace=None,static_shape=False,min_shapes=[64,64],max_shapes=[2560,1440])

########## BEGIN OF base.py ##########
# This file is a part of SmoothVideo Project (SVP) ver.4
# This is NOT the full Vapoursynth script, all used variables are defined via
# JScript code that generates the full script text.

def interpolate(clip):
    input_um = clip.resize.Point(format=vs.YUV420P10,dither_type="random")
    input_m = input_um
    input_m = input_m.std.CropRel(0,0,4,0)
    input_m8 = input_m.resize.Point(format=vs.YUV420P8)
    input_m = input_m.std.AddBorders(0,0,0,12)


    if nvof:
        smooth  = core.svp2.SmoothFps_NVOF(input_m,smoothfps_params,nvof_src=input_m8,src=input_um,fps=src_fps)
    elif not rife:
        super   = core.svp1.Super(input_m8,super_params)
        vectors = core.svp1.Analyse(super["clip"],super["data"],input_m8,analyse_params)
        smooth  = core.svp2.SmoothFps(input_m,super["clip"],super["data"],vectors["clip"],vectors["data"],smoothfps_params,src=input_um,fps=src_fps)
    elif rife:
        input_m = input_m.misc.SCDetect(threshold=1)
        print("-----> clip bps1 ", input_m[0].format.bits_per_sample )

        input_m = input_m.resize.Bicubic(format=rife_fmt,matrix_in_s="709")
        print("-----> clip bps2 ", input_m[0].format.bits_per_sample )

        if not rife_trt:
                smooth = core.rife.RIFE(input_m, factor_num=rife_num, factor_den=rife_den ,model_path=rife_mpath ,gpu_id=rife_gpu ,gpu_thread=rife_threads ,tta=False ,sc=True)
        else:
                smooth = RIFE(input_m,multi=rife_num,model=rife_mnum,backend=trt_backend)
                if rife_den>1:
                       smooth = FixFrameDurations(smooth.std.SelectEvery(cycle=rife_den,offsets=0),input_m,rife_num,rife_den)
        smooth = smooth.resize.Point(format=input_um.format.id,matrix_s="709")
        smooth = smooth.std.CropRel(0,0,0,12)
        smooth = core.svp2.SmoothFps_RIFE(smooth,smoothfps_params,src=input_um,multi=rife_num/rife_den,fps=src_fps)

    if demo_mode==1:
        return demo(input_m,smooth)
    else:
        return smooth

if stereo_type == 1:
    lf = interpolate(core.std.CropRel(clip,0,(int)(clip.width/2),0,0))
    rf = interpolate(core.std.CropRel(clip,(int)(clip.width/2),0,0,0))
    smooth = core.std.StackHorizontal([lf, rf])
elif stereo_type == 2:
    lf = interpolate(core.std.CropRel(clip,0,0,0,(int)(clip.height/2)))
    rf = interpolate(core.std.CropRel(clip,0,0,(int)(clip.height/2),0))
    smooth = core.std.StackVertical([lf, rf])
else:
    smooth =  interpolate(clip)
########### END OF base.py ###########


smooth.set_output()